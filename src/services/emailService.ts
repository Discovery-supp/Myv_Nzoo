import emailjs from '@emailjs/browser';

interface EmailData {
  to_email: string;
  to_name: string;
  reservation_id: string;
  space_type: string;
  start_date: string;
  end_date: string;
  amount: number;
  payment_method: string;
  company?: string;
  activity: string;
  occupants: number;
}

export const sendReservationConfirmationEmail = async (data: EmailData): Promise<boolean> => {
  try {
    console.log('üîÑ Tentative d\'envoi d\'email avec les donn√©es:', {
      ...data,
      // Ne pas logger l'email complet pour la s√©curit√©
      to_email: data.to_email ? '***@***.***' : 'undefined'
    });
    
    const serviceId = import.meta.env.VITE_EMAILJS_SERVICE_ID;
    const templateId = import.meta.env.VITE_EMAILJS_TEMPLATE_ID;
    const publicKey = import.meta.env.VITE_EMAILJS_PUBLIC_KEY;

    console.log('üîë Configuration EmailJS:', { serviceId, templateId, publicKey: publicKey ? 'D√©fini' : 'Non d√©fini' });

    if (!serviceId || !templateId || !publicKey) {
      console.warn('‚ö†Ô∏è Configuration EmailJS manquante:', {
        serviceId: serviceId ? 'D√©fini' : 'Manquant',
        templateId: templateId ? 'D√©fini' : 'Manquant',
        publicKey: publicKey ? 'D√©fini' : 'Manquant'
      });
      console.warn('‚ö†Ô∏è EmailJS non configur√© - l\'email de confirmation ne sera pas envoy√©');
      return false;
    }

    // Validation des donn√©es requises
    if (!data.to_email || !data.to_name) {
      throw new Error('Email ou nom du destinataire manquant');
    }

    // Nettoyer et valider l'email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.to_email)) {
      throw new Error('Format d\'email invalide: ' + data.to_email);
    }

    const templateParams = {
      // Param√®tres principaux
      to_email: data.to_email.trim(),
      to_name: data.to_name.trim(),
      user_email: data.to_email.trim(),
      user_name: data.to_name.trim(),
      
      // D√©tails de la r√©servation
      reservation_id: data.reservation_id,
      space_type: data.space_type || 'Non sp√©cifi√©',
      start_date: new Date(data.start_date).toLocaleDateString('fr-FR'),
      end_date: new Date(data.end_date).toLocaleDateString('fr-FR'),
      amount: data.amount?.toString() || '0',
      payment_method: data.payment_method === 'cash' ? 'Paiement en esp√®ces' : 
                     data.payment_method === 'mobile_money' ? 'Mobile Money' :
                     data.payment_method === 'visa' ? 'Carte VISA' : 
                     data.payment_method || 'Non sp√©cifi√©',
      company: data.company || 'Non sp√©cifi√©e',
      activity: data.activity || 'Non sp√©cifi√©e',
      occupants: data.occupants?.toString() || '1',
      
      // Message personnalis√©
      message: `Votre r√©servation a √©t√© confirm√©e avec succ√®s.\n\nR√©f√©rence: ${data.reservation_id}\nEspace: ${data.space_type}\nDu ${new Date(data.start_date).toLocaleDateString('fr-FR')} au ${new Date(data.end_date).toLocaleDateString('fr-FR')}\nMontant: $${data.amount}`,
      
      // Ajout de champs suppl√©mentaires pour compatibilit√©
      from_name: 'Nzoo Immo',
      reply_to: 'contact@nzooimmo.com'
    };

    console.log('üìß Param√®tres du template:', templateParams);

    // Initialiser EmailJS avec retry
    try {
      emailjs.init(publicKey);
      console.log('‚úÖ EmailJS initialis√© avec succ√®s');
    } catch (initError) {
      console.error('‚ùå Erreur d\'initialisation EmailJS:', initError);
      throw new Error('Impossible d\'initialiser EmailJS');
    }

    // Envoyer l'email avec timeout et retry
    console.log('üì§ Envoi de l\'email en cours...');
    
    const sendPromise = emailjs.send(serviceId, templateId, templateParams, publicKey);
    
    // Ajouter un timeout de 30 secondes
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Timeout: L\'envoi d\'email a pris trop de temps')), 30000);
    });
    
    await Promise.race([sendPromise, timeoutPromise]);
    
    console.log('‚úÖ Email de confirmation envoy√© avec succ√®s');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de l\'email:', error);
    
    // Log d√©taill√© de l'erreur
    if (error instanceof Error) {
      console.error('Message d\'erreur:', error.message);
      if (error.stack) {
        console.error('Stack trace:', error.stack);
      }
    }
    
    // Si c'est une erreur EmailJS sp√©cifique
    if (typeof error === 'object' && error !== null && 'status' in error) {
      console.error('D√©tails de l\'erreur EmailJS:', JSON.stringify(error, null, 2));
      
      // Gestion des erreurs sp√©cifiques EmailJS
      const emailError = error as any;
      if (emailError.status === 400) {
        console.error('‚ùå Erreur 400: Param√®tres invalides ou template introuvable');
      } else if (emailError.status === 401) {
        console.error('‚ùå Erreur 401: Cl√© API invalide ou service non autoris√©');
      } else if (emailError.status === 402) {
        console.error('‚ùå Erreur 402: Quota d\'emails d√©pass√©');
      } else if (emailError.status >= 500) {
        console.error('‚ùå Erreur serveur EmailJS:', emailError.status);
      }
    }
    
    // Ne pas faire √©chouer la r√©servation si l'email √©choue
    console.warn('‚ö†Ô∏è L\'email n\'a pas pu √™tre envoy√©, mais la r√©servation reste valide');
    return false;
  }
};